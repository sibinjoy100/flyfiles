#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('flyfiles:server');
const http = require('http');
require('dotenv').config();
const server = http.createServer(app);
const ip = require('ip');
const myip = ip.address();
const portfinder = require('portfinder');

var openPort = null;

portfinder.getPort(function (err, port) {
  if(err) throw err;

  else{
    openPort = port;
    app.set('port', openPort);

    server.listen(openPort, myip);
    server.on('error', onError);
    server.on('listening', onListening);

    console.log('Server running on: '+ myip+':'+openPort);
    
    process.env.ip = myip+':'+openPort;
    console.log('dotenv.ip:'+process.env.ip)
    /**
     * Normalize a port into a number, string, or false.
     */

    function normalizePort(val) {
      var port = parseInt(val, 10);

      if (isNaN(port)) {
        // named pipe
        return val;
      }

      if (port >= 0) {
        // port number
        return port;
      }

      return false;
    }

    /**
     * Event listener for HTTP server "error" event.
     */

    function onError(error) {
      if (error.syscall !== 'listen') {
        throw error;
      }

      var bind = typeof onError === 'string'
        ? 'Pipe ' + openPort
        : 'Port ' + openPort;

      // handle specific listen errors with friendly messages
      switch (error.code) {
        case 'EACCES':
          console.error(bind + ' requires elevated privileges');
          process.exit(1);
          break;
        case 'EADDRINUSE':
          console.error(bind + ' is already in use');
          process.exit(1);
          break;
        default:
          throw error;
      }
    }

    /**
     * Event listener for HTTP server "listening" event.
     */
    function onListening() {
      var addr = server.address();
      var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.openPort;
      debug('Listening on ' + bind);
    } 
  }
});



